# -*- coding: utf-8 -*-
"""MNIST_fashion_classifier_OptimizeCNNModel.h5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SuNayBaIIYTBOv_tXQEeurnlELfpetci
"""

pip install keras

import keras
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

import tensorflow as tf
from tensorflow import keras
import numpy as np
from kerastuner import RandomSearch
from kerastuner.engine.hyperparameters import HyperParameters

"""## Importing Fashion MNIST- Keras DataSet"""

(X_train, y_train), (X_test, y_test) = keras.datasets.fashion_mnist.load_data()

X_train.shape, y_train.shape

y_train[0]

class_labels = ["T-shirt/top","Trouser","Pullover","Dress","Coat","Sandal","Shirt","Sneaker","Bag","Ankle boot"]
'''
0 => T-shirt/top 
1 => Trouser 
2 => Pullover 
3 => Dress 
4 => Coat 
5 => Sandal 
6 => Shirt 
7 => Sneaker 
8 => Bag 
9 => Ankle boot '''

plt.imshow(X_train[0])

plt.imshow(X_train[0], cmap ="Greys")

plt.figure(figsize=(12,12))
for i in range(25):
  plt.subplot(5,5,i+1)
  plt.imshow(X_train[i],cmap="Greys")
  plt.axis('off')
  plt.title(class_labels[y_train[i]]+"="+str(y_train[i]), fontsize=12)

"""##Feature Scaling into range (0-9)"""

X_train = X_train/255
X_test = X_test/255

#X_train[0]

"""#Model_1 : Keras Sequential model"""

model_1 = keras.models.Sequential([
                         keras.layers.Flatten(input_shape=[28,28]),
                         keras.layers.Dense(units=32, activation='relu'),
                         keras.layers.Dense(units=32, activation='relu'),
                         keras.layers.Dense(units=10, activation='softmax')
                                ])

model_1.summary()

model_1.compile(optimizer='RMSprop', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model_1.fit(X_train, y_train, epochs=5)

"""## Test and Evaluate Neural Network Model"""

model_1.evaluate(X_test,y_test)

y_pred = model_1.predict(X_test)

np.argmax(y_pred[0].round(2))

y_test[0]

plt.figure(figsize=(20,20))
for i in range(25):
  plt.subplot(5,5,i+1)
  plt.imshow(X_test[i],cmap="Greys")
  plt.axis('off')
  plt.title("Actual= {} \n Predicted = {}".format(class_labels[y_test[i]], class_labels[np.argmax(y_pred[i])]))

"""#Confusion Matrix"""

cm = confusion_matrix(y_test, [ np.argmax(i) for i in y_pred])

plt.figure(figsize=(15,15))
sns.heatmap(cm, annot=True, fmt = "d")

"""#Report"""

cr = classification_report(y_test, [ np.argmax(i) for i in y_pred], target_names = class_labels,)
print(cr)

"""#Optimizing CNN Model - medel_2"""

(X_train2, y_train2), (X_test2, y_test2) = keras.datasets.fashion_mnist.load_data()

X_train2 = X_train2/255.0
X_test2 = X_test2/255.0

X_train2 = X_train2.reshape(len(X_train2),28,28,1)
X_test2 = X_test2.reshape(len(X_test2),28,28,1)

"""#Funtion for finding HyperParameters"""

def build_model(hp):  
  model = keras.Sequential([
    keras.layers.Conv2D(
        filters=hp.Int('conv_1_filter', min_value=32, max_value=128, step=16),
        kernel_size=hp.Choice('conv_1_kernel', values = [3,5]),
        activation='relu',
        input_shape=(28,28,1)
    ),
    keras.layers.Conv2D(
        filters=hp.Int('conv_2_filter', min_value=32, max_value=64, step=16),
        kernel_size=hp.Choice('conv_2_kernel', values = [3,5]),
        activation='relu'
    ),
    keras.layers.Flatten(),
    keras.layers.Dense(
        units=hp.Int('dense_1_units', min_value=32, max_value=128, step=16),
        activation='relu'
    ),
    keras.layers.Dense(10, activation='softmax')
  ])
  
  model.compile(optimizer=keras.optimizers.Adam(hp.Choice('learning_rate', values=[1e-2, 1e-3])),
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
  
  return model

tuner_search=RandomSearch(build_model,
                          objective='val_accuracy',
                          max_trials=5,directory='output',project_name="Mnist Fashion")

tuner_search.search(X_train2, y_train2,epochs=3,validation_split=0.1)

"""###Selecting the best hyperparameter"""

model_2 = tuner_search.get_best_models(num_models=1)[0]

model_2.summary()

model_2.fit(X_train2, y_train2, epochs=10, validation_split=0.1, initial_epoch=3)

"""## model_2 test and evaluation"""

model_2.evaluate(X_test2,y_test2)

y_pred2 = model_2.predict(X_test2)

cr2 = classification_report(y_test2, [ np.argmax(i) for i in y_pred2], target_names = class_labels,)
print(cr2)

"""#Acuuracy comparison using reports"""

print('--------Kera Sequential Model - Reprt_1--------')
print(cr)

print('--------after optimizing Hyper parameter - Report_2--------')
print(cr2)

"""#Model Saving"""

#Saving model_1 and model_2
model_1.save("MNIST_fashion_classifier_RMSprop_1.h5")
model_2.save("MNIST_fashion_classifier_RMSprop_2.h5")

#Model_1 Loading for predicting
model_1 = keras.models.load_model("MNIST_fashion_classifier_RMSprop_1.h5")
model_1.predict(X_test)

#Model_2 Loading for predicting
model_2 = keras.models.load_model("MNIST_fashion_classifier_RMSprop_2.h5")
model_2.predict(X_test2)

